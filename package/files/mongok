#!/bin/bash

if [[ "$@" == *"--help"* ]]; then
  echo "postgresk script, wrapper around common postgresd client commands to connect directly"
  echo "to the postgres which sits in this kave. Reads the contents of /etc/postgresclient.conf"
  echo "understands export import perf stat dump files oplog restore top and the postgres shell"
  echo ""
  echo "usage: postgresk [command] [other arguments]"
  echo "e.g.: postgresk /foo #opens the postgres shell to postgres_host:postgres_port/foo database"
  echo "e.g.: postgresk top #starts postgrestop --host postgres_host:postgres_port"
fi

postgres_host=''
postgres_port=''
known_commands="export import perf stat dump files oplog restore top"
if [ -f /etc/postgresclient.conf ]; then
  postgres_host_tmp=`grep -e postgres_host /etc/postgresclient.conf | awk -F ":" '{print $2}' | tr -d '[[:space:]]'`
  postgres_port_tmp=`grep -e postgres_port /etc/postgresclient.conf | awk -F ":" '{print $2}' | tr -d '[[:space:]]'`
  if [ ! -z "$postgres_host_tmp" ]; then
    postgres_host=$postgres_host_tmp
  fi
  if [ ! -z "$postgres_port_tmp" ]; then
    postgres_port=$postgres_port_tmp
  fi
else
  echo "Error: no /etc/postgresclient.conf found!"
  exit 1
fi

if [ -z "$postgres_host" ]; then
  echo "Error: no postgres_host found from /etc/postgresclient.conf"
  exit 1
fi
if [ -z "$postgres_port" ]; then
  echo "Error: no postgres_port found from /etc/postgresclient.conf"
  exit 1
fi



if [ -z "$1" ]; then
  postgres ${postgres_host}:${postgres_port}
elif [[ "$known_commands" == *"$1"* ]]; then
  postgres$@ --host ${postgres_host}:${postgres_port}
elif [[ "${1:0:1}" == "/" ]]; then
  postgres ${postgres_host}:${postgres_port}$@
else
  postgres ${postgres_host}:${postgres_port} $@
fi
